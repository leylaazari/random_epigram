{"version":3,"file":"static/js/143.0990ac1a.chunk.js","mappings":"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","sources":["components/intro/Intro.tsx","components/display-epigram/EpigramDisplay.tsx","components/display-epigram/EpigramChange.tsx","components/custom/CountDownTimer.tsx","common/functions/getRandomBoolean.ts","common/functions/getRandomItemFromList.ts","utils/LocalSevice.ts","components/display-epigram/EpigramDisplayContainer.tsx","components/add-epigram/EpigramAdd.tsx","components/add-epigram/EpigramAddContainer.tsx","components/add-epigram/AddNewEpigramButton.tsx","components/home/HomeContainer.tsx","views/home/Index.jsx"],"sourcesContent":["import \"./style/style.scss\";\r\n\r\nconst Intro = () => {\r\n  return (\r\n    <div className=\"section-wrapper wrappper-intro\">\r\n      <div className=\"imageContainer\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import { DisplayEpigramProps } from \"src/common/interfaces\";\r\n\r\nconst EpigramDisplay = ({ epigram }: DisplayEpigramProps) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12 p-5\">\r\n        <div className=\"card\">\r\n          <div\r\n            data-test=\"display-random-epigram\"\r\n            className=\"card-header d-flex justify-content-between\"\r\n          >\r\n            <div>Display Random Epigram</div>\r\n          </div>\r\n          <div data-test=\"epigram\" className=\"card-body\">\r\n            {epigram}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EpigramDisplay;\r\n","import React from \"react\";\r\nimport { ChangeEpigramProps } from \"src/common/interfaces\";\r\n\r\nconst EpigramChange = ({\r\n  handleChangeEpigram,\r\n  handleAutomatic,\r\n  isAutomatic,\r\n}: ChangeEpigramProps) => {\r\n  return (\r\n    <div className=\"row mt-3\">\r\n      <div className=\"col-12 c-epigram-change\">\r\n        <div className=\"d-sm-flex justify-content-sm-between\">\r\n          <button\r\n            className=\"btn btn-warning mb-2\"\r\n            onClick={handleChangeEpigram}\r\n            data-test=\"change-epigram\"\r\n          >\r\n            Change Epigram\r\n          </button>\r\n          <div className=\"form-check form-switch mb-2\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              data-test=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              name=\"switch\"\r\n              value={isAutomatic ? \"yes\" : \"no\"}\r\n              checked={isAutomatic}\r\n              onChange={handleAutomatic}\r\n            />\r\n            <label className=\"form-check-label\">Automatic Change</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(EpigramChange);\r\n","import { useState, useEffect } from \"react\";\r\nimport { CountdownProps } from \"src/common/interfaces\";\r\n\r\nconst intial = 10;\r\n\r\nconst CountDownTimer = ({ handleResetTimer }: CountdownProps) => {\r\n  const [countDown, setCountDown] = useState(intial);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (countDown <= 0) {\r\n        handleResetTimer();\r\n        setCountDown(intial);\r\n      } else {\r\n        setCountDown(countDown - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [countDown]);\r\n\r\n  return <div className=\"refresh-after\">Refresh After: {countDown} s</div>;\r\n};\r\n\r\nexport default CountDownTimer;\r\n","const getRandomBoolean = () => {\r\n    return Math.random() < 0.5;\r\n}\r\n\r\nexport default getRandomBoolean;","import { EpigramAddType } from \"../types/EpigramAddType\";\r\n\r\nconst getRandomItemFromList = (items: EpigramAddType[]) =>\r\n{  \r\n    return items[Math.floor(Math.random()*items.length)];     \r\n}\r\n\r\nexport default getRandomItemFromList;","import { toast } from \"react-toastify\";\r\nimport getRandomItemFromList from \"src/common/functions/getRandomItemFromList\";\r\nimport { EpigramAddType } from \"src/common/types/EpigramAddType\";\r\n\r\nconst LocalSevice = { \r\n  getRandomItem: async () => {\r\n    try {      \r\n        const res: EpigramAddType[] = JSON.parse(localStorage.getItem(\"epigramList\") || \"[]\");\r\n        const result = getRandomItemFromList(res);\r\n        return result?.newEpigram;\r\n    } catch (err: any) {\r\n        toast.error(\"The operation encountered an error.\");\r\n        return \"\";\r\n    }\r\n  },\r\n  addToEpigramList: async (item: EpigramAddType) => {\r\n    try {\r\n        let res: EpigramAddType[] = JSON.parse(localStorage.getItem(\"epigramList\") || \"[]\");\r\n        res.push(item);\r\n        localStorage.setItem(\"epigramList\", JSON.stringify(res));\r\n        toast.success(\"The save was successful.\");\r\n        return true;\r\n    } catch (err: any) {\r\n        toast.error(\"The operation encountered an error.\");\r\n        return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport default LocalSevice;\r\n","import { useState, useEffect, useCallback, Suspense } from \"react\";\r\nimport EpigramDisplay from \"./EpigramDisplay\";\r\nimport EpigramChange from \"./EpigramChange\";\r\nimport Spinner from \"src/components/custom/Spinner\";\r\nimport CountDownTimer from \"src/components/custom/CountDownTimer\";\r\nimport getRandomBoolean from \"src/common/functions/getRandomBoolean\";\r\nimport LocalSevice from \"src/utils/LocalSevice\";\r\nimport \"./style/style.scss\";\r\n\r\nconst fortune = require(\"random-fortune\");\r\n\r\nconst DisplayEpigramContainer = () => {\r\n  const [newEpigram, setNewEpigram] = useState(\"\");\r\n  const [isAutomatic, setIsAutomatic] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getNewEpigram();\r\n  }, []);\r\n\r\n  const getNewEpigram = useCallback(async () => {\r\n    //true =  select a text from fortune\r\n    //false = select a text from custom\r\n    if (getRandomBoolean()) {\r\n      setNewEpigram(fortune.fortune());\r\n    } else {\r\n      const result = await LocalSevice.getRandomItem();\r\n      if (result) {\r\n        setNewEpigram(result);\r\n      } else {\r\n        setNewEpigram(fortune.fortune());\r\n      }\r\n    }\r\n  }, [newEpigram]);\r\n\r\n  const handleAutomatic = useCallback(() => {\r\n    setIsAutomatic((isAutomatic) => !isAutomatic);\r\n  }, [isAutomatic]);\r\n\r\n  const handleResetTimer = useCallback(() => {\r\n    if (isAutomatic) {\r\n      getNewEpigram();\r\n    }\r\n  }, [isAutomatic]);\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <div\r\n        className=\"epigram-display-container\"\r\n        data-test=\"epigram-display-container\"\r\n      >\r\n        <EpigramChange\r\n          handleChangeEpigram={getNewEpigram}\r\n          handleAutomatic={handleAutomatic}\r\n          isAutomatic={isAutomatic}\r\n        />\r\n        <Suspense fallback={<Spinner />}>\r\n          {isAutomatic && (\r\n            <CountDownTimer handleResetTimer={handleResetTimer} />\r\n          )}\r\n          <EpigramDisplay epigram={newEpigram} />\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayEpigramContainer;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { EpigramAddProps } from \"src/common/interfaces\";\r\nimport { EpigramAddType } from \"src/common/types/EpigramAddType\";\r\nimport \"./style/style.scss\";\r\n\r\nconst EpigramAdd = ({ HandleShowAdd, SaveEpigram }: EpigramAddProps) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<EpigramAddType>({});\r\n\r\n  const onSubmit = handleSubmit(async (data: EpigramAddType) => {\r\n    SaveEpigram(data);\r\n  });\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12 p-5\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header d-flex justify-content-between\">\r\n            Add New Epigram\r\n          </div>\r\n          <form\r\n            className=\"search-suggest-form p-5 text-start\"\r\n            onSubmit={onSubmit}\r\n            data-test=\"form-new-epigram\"\r\n          >\r\n            <label>New Epigram:</label>\r\n            <textarea\r\n              className=\"w-100 text-black p-2 newEpigram\"\r\n              rows={3}\r\n              data-testid=\"input-newEpigram\"\r\n              {...register(\"newEpigram\", {\r\n                required: true,\r\n                maxLength: 2000,\r\n              })}\r\n            />\r\n            {errors.newEpigram?.type === \"required\" && (\r\n              <p className=\"error userform__error\">It is required.</p>\r\n            )}\r\n            <button type=\"submit\" className=\"btn btn-success m-2 btn-add\">\r\n              Save\r\n            </button>\r\n            <button\r\n              type=\"reset\"\r\n              className=\"btn btn-danger btn-cancel\"\r\n              onClick={HandleShowAdd}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EpigramAdd;\r\n","import { Suspense } from \"react\";\r\nimport Spinner from \"src/components/custom/Spinner\";\r\nimport EpigramAdd from \"./EpigramAdd\";\r\nimport LocalSevice from \"src/utils/LocalSevice\";\r\nimport { EpigramAddContainerProps } from \"src/common/interfaces\";\r\nimport { EpigramAddType } from \"src/common/types/EpigramAddType\";\r\n\r\nconst EpigramAddContainer = ({ HandleShowAdd }: EpigramAddContainerProps) => {\r\n  const SaveEpigram = async (data: EpigramAddType) => {\r\n    const result = await LocalSevice.addToEpigramList(data);\r\n    if (result) HandleShowAdd();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <div className=\"epigram-display-container\">\r\n        <Suspense fallback={<Spinner />}>\r\n          <EpigramAdd SaveEpigram={SaveEpigram} HandleShowAdd={HandleShowAdd} />\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EpigramAddContainer;\r\n","import { EpigramAddContainerProps } from \"src/common/interfaces\";\r\n\r\nconst AddNewEpigramButton = ({ HandleShowAdd }: EpigramAddContainerProps) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row mt-3 text-start\">\r\n        <div className=\"col-12\">\r\n          <button\r\n            data-test=\"btnShowAdd\"\r\n            className=\"btn btn-dark btnShowAdd\"\r\n            onClick={HandleShowAdd}\r\n          >\r\n            Add New Epigram\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewEpigramButton;\r\n","import { useState } from \"react\";\r\nimport DisplayEpigram from \"src/components/display-epigram/EpigramDisplayContainer\";\r\nimport EpigramAdd from \"src/components/add-epigram/EpigramAddContainer\";\r\nimport AddNewEpigramButton from \"../add-epigram/AddNewEpigramButton\";\r\n\r\nconst HomeContainer = () => {\r\n  const [isShowAdd, setIsShowAdd] = useState(false);\r\n\r\n  const HandleShowAdd = () => {\r\n    setIsShowAdd((setIsShowAdd) => !setIsShowAdd);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddNewEpigramButton HandleShowAdd={HandleShowAdd} />\r\n      {isShowAdd ? (\r\n        <EpigramAdd HandleShowAdd={HandleShowAdd} />\r\n      ) : (\r\n        <DisplayEpigram />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomeContainer;\r\n","import Intro from \"src/components/intro/Intro\";\r\nimport Home from \"src/components/home/HomeContainer\";\r\n\r\nconst Index = () => {\r\n  return (\r\n    <>\r\n      <Intro />\r\n      <Home />      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"names":["className","epigram","EpigramChange","handleChangeEpigram","handleAutomatic","isAutomatic","onClick","type","name","value","checked","onChange","React","handleResetTimer","useState","countDown","setCountDown","useEffect","interval","setInterval","clearInterval","Math","random","items","floor","length","LocalSevice","getRandomItem","res","JSON","parse","localStorage","getItem","result","getRandomItemFromList","newEpigram","toast","addToEpigramList","item","push","setItem","stringify","fortune","require","setNewEpigram","setIsAutomatic","getNewEpigram","useCallback","getRandomBoolean","Suspense","fallback","Spinner","HandleShowAdd","SaveEpigram","useForm","register","handleSubmit","errors","formState","onSubmit","data","rows","required","maxLength","isShowAdd","setIsShowAdd"],"sourceRoot":""}